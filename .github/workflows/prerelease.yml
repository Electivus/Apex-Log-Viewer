name: Pre-release (manual)

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: 'Branch to build from'
        required: false
        default: 'main'
        type: string
      label:
        description: 'Optional label for the pre-release (defaults to UTC date)'
        required: false
        type: string
      publish_marketplace:
        description: 'Publish to VS Code Marketplace'
        required: true
        default: true
        type: boolean
      publish_github:
        description: 'Create GitHub pre-release (tag + release)'
        required: true
        default: true
        type: boolean

permissions:
  contents: write

concurrency:
  group: prerelease-${{ github.event.inputs.base_branch || 'main' }}
  cancel-in-progress: false

jobs:
  prerelease:
    name: Build Pre-release
    runs-on: ubuntu-latest
    env:
      INPUT_LABEL: ${{ github.event.inputs.label || '' }}
      BASE_BRANCH: ${{ github.event.inputs.base_branch || 'main' }}
      PUBLISH_MARKETPLACE: ${{ github.event.inputs.publish_marketplace || 'true' }}
      PUBLISH_GITHUB: ${{ github.event.inputs.publish_github || 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ env.BASE_BRANCH }}

      - name: Setup Node.js 20.17.0
        uses: actions/setup-node@v5
        with:
          node-version: 20.17.0
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Compute pre-release version
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          VERSION_JSON=$(node <<'NODE'
          const { execSync, spawnSync } = require('child_process');
          const fs = require('fs');
          const inputLabel = process.env.INPUT_LABEL?.trim() ?? '';
          const tagsRaw = execSync("git tag --list 'v*' --sort=-v:refname", { encoding: 'utf8' }).trim();
          const tags = tagsRaw ? tagsRaw.split(/\r?\n/).filter(Boolean) : [];
          let major = 0;
          let minor = 1;
          let basePatch = -1;
          if (tags.length) {
            const latestParts = tags[0].replace(/^v/, '').split('.').map(Number);
            if (latestParts.length !== 3 || latestParts.some(Number.isNaN)) {
              throw new Error(`Unable to parse latest tag ${tags[0]}`);
            }
            const [maj, min, patch] = latestParts;
            major = maj;
            if (min % 2 === 0) {
              minor = min + 1;
            } else {
              minor = min;
              basePatch = patch;
            }
          }
          const parseTag = tag => {
            const [maj, min, pat] = tag.replace(/^v/, '').split('.').map(Number);
            return { major: maj, minor: min, patch: pat };
          };
          let localMaxPatch = basePatch;
          for (const tag of tags) {
            const info = parseTag(tag);
            if (Number.isNaN(info.major) || Number.isNaN(info.minor) || Number.isNaN(info.patch)) {
              continue;
            }
            if (info.major === major && info.minor === minor) {
              if (info.patch > localMaxPatch) {
                localMaxPatch = info.patch;
              }
            }
          }
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          const extId = `${pkg.publisher}.${pkg.name}`;
          let marketplacePatch = -1;
          try {
            const res = spawnSync('./node_modules/.bin/vsce', ['show', extId, '--json'], { encoding: 'utf8' });
            if (res.status === 0 && res.stdout) {
              const meta = JSON.parse(res.stdout);
              const versions = Array.isArray(meta.versions) ? meta.versions : [];
              for (const v of versions) {
                const props = Array.isArray(v.properties) ? v.properties : [];
                const isPre = props.some(p => p.key === 'Microsoft.VisualStudio.Code.PreRelease' && String(p.value) === 'true');
                if (!isPre) continue;
                const parts = String(v.version || '').split('.').map(Number);
                if (parts.length !== 3 || parts.some(Number.isNaN)) continue;
                const [maj, min, pat] = parts;
                if (maj === major && min === minor && pat > marketplacePatch) {
                  marketplacePatch = pat;
                }
              }
            }
          } catch (err) {
            console.warn('vsce show failed:', err.message ?? err);
          }
          const newPatch = Math.max(localMaxPatch, marketplacePatch) + 1;
          const version = `${major}.${minor}.${newPatch}`;
          const tag = `v${version}`;
          const shortSha = execSync('git rev-parse --short HEAD', { encoding: 'utf8' }).trim();
          let label;
          if (inputLabel) {
            label = inputLabel;
          } else {
            const now = new Date();
            const yyyy = now.getUTCFullYear();
            const mm = String(now.getUTCMonth() + 1).padStart(2, '0');
            const dd = String(now.getUTCDate()).padStart(2, '0');
            label = `${yyyy}${mm}${dd}`;
          }
          process.stdout.write(JSON.stringify({ version, tag, label, shortSha }));
          NODE
          )
          printf '%s' "$VERSION_JSON" > version.json
          VERSION=$(jq -r '.version' version.json)
          TAG=$(jq -r '.tag' version.json)
          LABEL=$(jq -r '.label' version.json)
          SHORTSHA=$(jq -r '.shortSha' version.json)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"
          echo "shortsha=$SHORTSHA" >> "$GITHUB_OUTPUT"
          {
            echo "VERSION=$VERSION"
            echo "TAG=$TAG"
            echo "LABEL=$LABEL"
            echo "SHORT_SHA=$SHORTSHA"
          } >> "$GITHUB_ENV"

      - name: Show computed version
        run: |
          echo "Pre-release version: $VERSION"
          echo "Tag: $TAG"
          echo "Label: $LABEL"

      - name: Apply pre-release version
        run: npm run version:set -- "$VERSION"

      - name: Build extension bundle
        run: npm run package

      - name: Run fast tests
        run: npm run test:unit:ci

      - name: Package VSIX
        id: package
        shell: bash
        run: |
          set -euo pipefail
          rm -f *.vsix
          npx --yes @vscode/vsce package --no-yarn --pre-release
          VSIX=$(echo apex-log-viewer-*.vsix)
          if [ -z "$VSIX" ]; then
            echo "VSIX package not found" >&2
            exit 1
          fi
          echo "vsix=$VSIX" >> "$GITHUB_OUTPUT"
          echo "VSIX=$VSIX" >> "$GITHUB_ENV"

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: apex-log-viewer-${{ env.VERSION }}-pre
          path: ${{ steps.package.outputs.vsix }}

      - name: Publish to Marketplace
        if: env.PUBLISH_MARKETPLACE == 'true'
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
          VERSION: ${{ env.VERSION }}
        run: |
          set -euo pipefail
          if [ -z "${VSCE_PAT}" ]; then
            echo "VSCE_PAT not configured; aborting publish." >&2
            exit 1
          fi
          npx --yes @vscode/vsce publish --no-yarn --pre-release

      - name: Publish GitHub pre-release
        if: env.PUBLISH_GITHUB == 'true'
        env:
          VERSION: ${{ env.VERSION }}
          TAG: ${{ env.TAG }}
          LABEL: ${{ env.LABEL }}
          VSIX: ${{ env.VSIX }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          if ! git rev-parse "$TAG" >/dev/null 2>&1; then
            git tag "$TAG"
            git push origin "$TAG"
          fi
          TITLE="Pre-release $TAG"
          if [ -n "$LABEL" ]; then
            TITLE="$TITLE ($LABEL)"
          fi
          NOTES="Pre-release build from $SHORT_SHA"
          if gh release view "$TAG" >/dev/null 2>&1; then
            gh release upload "$TAG" "$VSIX" --clobber
            gh release edit "$TAG" --prerelease --notes "$NOTES" --title "$TITLE"
          else
            gh release create "$TAG" "$VSIX" --prerelease --notes "$NOTES" --title "$TITLE"
          fi

      - name: Restore development version
        run: npm run version:set -- 0.0.0
