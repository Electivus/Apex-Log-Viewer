name: CI

on:
  push:
    # Trunk-based: run CI on any branch and on version tags
    branches:
      - '**'
    tags:
      - 'v*'
  release:
    types: [published]
  pull_request:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Run packaging for a specific tag (e.g., v0.3.1)"
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Principle of least privilege for GITHUB_TOKEN
permissions:
  contents: read

jobs:
  changelog_guard:
    name: Guard Changelog (no manual edits)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Ensure CHANGELOG.md is only changed by Release Please
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const headRef = pr?.head?.ref || '';
            const author = pr?.user?.login || '';
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              per_page: 100
            });
            const changed = files.map(f => f.filename);
            const touchedChangelog = changed.includes('CHANGELOG.md');
            const isAllowedBot = author === 'release-please[bot]' || author === 'github-actions[bot]';
            const isReleasePleaseBranch = headRef.startsWith('release-please--');
            if (touchedChangelog && !(isAllowedBot || isReleasePleaseBranch)) {
              core.setFailed('Do not edit CHANGELOG.md directly. It is managed by Release Please.');
            } else {
              core.info('Changelog edits are allowed or not present.');
            }
  build_and_test:
    name: Build and Test (Node ${{ matrix.node }} â€¢ ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Linux test deps (Electron)
        if: runner.os == 'Linux'
        run: bash scripts/install-linux-deps.sh

      - name: Build (type-check + lint + bundle)
        run: npm run build

      - name: Run tests (VS Code)
        # Override CI env just for tests to avoid scratch-org attempts
        env:
          CI: ''
        run: npm test

  package:
    name: Package VSIX
    # Run on tag pushes, on published Releases, or manual dispatch with tag_name
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != '')
    needs: build_and_test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Allow uploading artifacts; keep repo contents read-only
    permissions:
      contents: read
      actions: write
    env:
      VSCE_PAT: ${{ secrets.VSCE_PAT }}
      TAG_NAME: ${{ github.ref_type == 'tag' && github.ref_name || (github.event_name == 'release' && github.event.release.tag_name) || github.event.inputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build + generate NLS assets
        run: npm run package

      - name: Determine channel (stable vs pre-release)
        id: channel
        run: |
          VERSION=$(node -p "require('./package.json').version")
          MINOR=$(node -p "require('./package.json').version.split('.')[1]")
          TAG_NAME="${TAG_NAME}"
          # default: even minor => stable, odd minor => pre-release
          if [ $((MINOR % 2)) -eq 1 ]; then
            PRE_RELEASE=true
          else
            PRE_RELEASE=false
          fi
          # allow explicit override via tag suffix (e.g., v0.7.0-pre, v0.7.0-beta.1)
          if [[ "$TAG_NAME" == *"-pre"* || "$TAG_NAME" == *"-beta"* || "$TAG_NAME" == *"-alpha"* || "$TAG_NAME" == *"-rc"* ]]; then
            PRE_RELEASE=true
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pre_release=$PRE_RELEASE" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PRE_RELEASE=$PRE_RELEASE" >> $GITHUB_ENV
          if [ "$PRE_RELEASE" = "true" ]; then echo "CHANNEL_SUFFIX=pre" >> $GITHUB_ENV; else echo "CHANNEL_SUFFIX=stable" >> $GITHUB_ENV; fi

      - name: Set GitHub Release prerelease flag automatically
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        env:
          PRE_RELEASE: ${{ steps.channel.outputs.pre_release }}
          TAG_NAME: ${{ env.TAG_NAME }}
        run: |
          echo "Setting prerelease=$PRE_RELEASE for $TAG_NAME"
          RID=$(gh api -X GET repos/${{ github.repository }}/releases/tags/${TAG_NAME} -q .id)
          # Use API because gh release edit lacks an explicit --prerelease=false flag
          if [ "$PRE_RELEASE" = "true" ]; then
            gh api -X PATCH repos/${{ github.repository }}/releases/$RID -f prerelease=true
          else
            gh api -X PATCH repos/${{ github.repository }}/releases/$RID -f prerelease=false
          fi

      - name: Create VSIX
        run: |
          if [ "${PRE_RELEASE}" = "true" ]; then
            echo "Packaging pre-release VSIX (${VERSION})"
            npm run vsce:package:pre
          else
            echo "Packaging stable VSIX (${VERSION})"
            npm run vsce:package
          fi

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: apex-log-viewer-${{ github.ref_name }}-${{ env.CHANNEL_SUFFIX }}-vsix
          path: |
            ./*.vsix
          if-no-files-found: error


  publish:
    name: Publish to Marketplace
    # Run on tag pushes, published Releases, or manual dispatch with tag_name
    if: (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != '')) && github.repository == 'Electivus/Apex-Log-Viewer'
    needs: package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    environment: marketplace
    env:
      VSCE_PAT: ${{ secrets.VSCE_PAT }}
      TAG_NAME: ${{ github.ref_type == 'tag' && github.ref_name || (github.event_name == 'release' && github.event.release.tag_name) || github.event.inputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build + generate NLS assets
        run: npm run package

      - name: Determine channel (stable vs pre-release)
        id: channel
        run: |
          VERSION=$(node -p "require('./package.json').version")
          MINOR=$(node -p "require('./package.json').version.split('.')[1]")
          TAG_NAME="${TAG_NAME}"
          if [ $((MINOR % 2)) -eq 1 ]; then PRE_RELEASE=true; else PRE_RELEASE=false; fi
          if [[ "$TAG_NAME" == *"-pre"* || "$TAG_NAME" == *"-beta"* || "$TAG_NAME" == *"-alpha"* || "$TAG_NAME" == *"-rc"* ]]; then PRE_RELEASE=true; fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pre_release=$PRE_RELEASE" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PRE_RELEASE=$PRE_RELEASE" >> $GITHUB_ENV

      - name: Set GitHub Release prerelease flag automatically
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        env:
          PRE_RELEASE: ${{ steps.channel.outputs.pre_release }}
          TAG_NAME: ${{ env.TAG_NAME }}
        run: |
          echo "Setting prerelease=$PRE_RELEASE for $TAG_NAME"
          RID=$(gh api -X GET repos/${{ github.repository }}/releases/tags/${TAG_NAME} -q .id)
          if [ "$PRE_RELEASE" = "true" ]; then
            gh api -X PATCH repos/${{ github.repository }}/releases/$RID -f prerelease=true
          else
            gh api -X PATCH repos/${{ github.repository }}/releases/$RID -f prerelease=false
          fi
      - name: Publish
        run: |
          if [ "${PRE_RELEASE}" = "true" ]; then
            echo "Publishing pre-release ${VERSION}"
            npm run vsce:publish:pre
          else
            echo "Publishing stable ${VERSION}"
            npm run vsce:publish
          fi
