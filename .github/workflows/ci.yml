name: CI

on:
  push:
    # Trunk-based: run CI on any branch (no packaging here)
    branches:
      - '**'
  pull_request:
  workflow_dispatch:
    inputs:
      scope:
        description: "Optional test scope (unit|integration|all)"
        required: false
        default: unit
        type: choice
        options:
          - unit
          - integration
          - all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Principle of least privilege for GITHUB_TOKEN
permissions:
  contents: read

jobs:
  build_and_test:
    name: Build and Test (Node ${{ matrix.node }} â€¢ ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [20]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build (type-check + lint + bundle)
        run: npm run build

      - name: Run tests
        run: |
          case "${{ github.event.inputs.scope || 'unit' }}" in
            unit) npm run test:unit:ci ;;
            integration) npm run test:integration:ci ;;
            all) npm run test:ci ;;
            *) npm run test:unit:ci ;;
          esac

  smoke_vsix:
    name: VSIX Smoke Test
    needs: build_and_test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Build and run VSIX smoke
        run: npm run test:smoke:vsix
        env:
          ALWAYS_SMOKE_VSIX: "1"

  package:
    name: Package VSIX
    # Run on tag pushes, on published Releases, or manual dispatch with tag_name
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != '')
    needs: build_and_test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Needs contents: write to toggle release flags
    permissions:
      contents: write
      actions: write
    env:
      VSCE_PAT: ${{ secrets.VSCE_PAT }}
      TAG_NAME: ${{ github.ref_type == 'tag' && github.ref_name || (github.event_name == 'release' && github.event.release.tag_name) || github.event.inputs.tag_name }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build + generate NLS assets
        run: npm run package

      - name: Determine channel (stable vs pre-release)
        id: channel
        run: |
          VERSION=$(node -p "require('./package.json').version")
          MINOR=$(node -p "require('./package.json').version.split('.')[1]")
          TAG_NAME="${TAG_NAME}"
          # default: even minor => stable, odd minor => pre-release
          if [ $((MINOR % 2)) -eq 1 ]; then
            PRE_RELEASE=true
          else
            PRE_RELEASE=false
          fi
          # allow explicit override via tag suffix (e.g., v0.7.0-pre, v0.7.0-beta.1)
          if [[ "$TAG_NAME" == *"-pre"* || "$TAG_NAME" == *"-beta"* || "$TAG_NAME" == *"-alpha"* || "$TAG_NAME" == *"-rc"* ]]; then
            PRE_RELEASE=true
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pre_release=$PRE_RELEASE" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PRE_RELEASE=$PRE_RELEASE" >> $GITHUB_ENV
          if [ "$PRE_RELEASE" = "true" ]; then echo "CHANNEL_SUFFIX=pre" >> $GITHUB_ENV; else echo "CHANNEL_SUFFIX=stable" >> $GITHUB_ENV; fi

      - name: Ensure telemetry secret present
        if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != '')
        env:
          APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}
        run: |
          set -euo pipefail
          if [ -z "${APPLICATIONINSIGHTS_CONNECTION_STRING:-}" ]; then
            echo "Missing APPLICATIONINSIGHTS_CONNECTION_STRING secret. Refusing to package without telemetry." >&2
            exit 1
          fi

      - name: Set GitHub Release prerelease flag automatically
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        env:
          PRE_RELEASE: ${{ steps.channel.outputs.pre_release }}
          TAG_NAME: ${{ env.TAG_NAME }}
        run: |
          echo "Setting prerelease=$PRE_RELEASE for $TAG_NAME"
          RID=$(gh api -X GET repos/${{ github.repository }}/releases/tags/${TAG_NAME} -q .id)
          # Use API because gh release edit lacks an explicit --prerelease=false flag
          if [ "$PRE_RELEASE" = "true" ]; then
            gh api -X PATCH repos/${{ github.repository }}/releases/$RID -f prerelease=true
          else
            gh api -X PATCH repos/${{ github.repository }}/releases/$RID -f prerelease=false
          fi

      - name: Create VSIX
        env:
          APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}
        run: |
          if [ "${PRE_RELEASE}" = "true" ]; then
            echo "Packaging pre-release VSIX (${VERSION})"
            npm run vsce:package:pre
          else
            echo "Packaging stable VSIX (${VERSION})"
            npm run vsce:package
          fi

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: apex-log-viewer-${{ github.ref_name }}-${{ env.CHANNEL_SUFFIX }}-vsix
          path: |
            ./*.vsix
          if-no-files-found: error


  publish:
    name: Publish to Marketplace
    # Run on tag pushes, published Releases, or manual dispatch with tag_name
    if: (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != '')) && github.repository == 'Electivus/Apex-Log-Viewer'
    needs: package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
    environment: marketplace
    env:
      VSCE_PAT: ${{ secrets.VSCE_PAT }}
      TAG_NAME: ${{ github.ref_type == 'tag' && github.ref_name || (github.event_name == 'release' && github.event.release.tag_name) || github.event.inputs.tag_name }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build + generate NLS assets
        run: npm run package

      - name: Determine channel (stable vs pre-release)
        id: channel
        run: |
          VERSION=$(node -p "require('./package.json').version")
          MINOR=$(node -p "require('./package.json').version.split('.')[1]")
          TAG_NAME="${TAG_NAME}"
          if [ $((MINOR % 2)) -eq 1 ]; then PRE_RELEASE=true; else PRE_RELEASE=false; fi
          if [[ "$TAG_NAME" == *"-pre"* || "$TAG_NAME" == *"-beta"* || "$TAG_NAME" == *"-alpha"* || "$TAG_NAME" == *"-rc"* ]]; then PRE_RELEASE=true; fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pre_release=$PRE_RELEASE" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PRE_RELEASE=$PRE_RELEASE" >> $GITHUB_ENV

      - name: Set GitHub Release prerelease flag automatically
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        env:
          PRE_RELEASE: ${{ steps.channel.outputs.pre_release }}
          TAG_NAME: ${{ env.TAG_NAME }}
        run: |
          echo "Setting prerelease=$PRE_RELEASE for $TAG_NAME"
          RID=$(gh api -X GET repos/${{ github.repository }}/releases/tags/${TAG_NAME} -q .id)
          if [ "$PRE_RELEASE" = "true" ]; then
            gh api -X PATCH repos/${{ github.repository }}/releases/$RID -f prerelease=true
          else
            gh api -X PATCH repos/${{ github.repository }}/releases/$RID -f prerelease=false
          fi
      - name: Download VSIX artifact from package job
        uses: actions/download-artifact@v5
        with:
          name: apex-log-viewer-${{ github.ref_name }}-${{ env.CHANNEL_SUFFIX }}-vsix
          path: .

      - name: Publish from VSIX artifact
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          set -euo pipefail
          FILE=$(ls *.vsix | head -n1)
          if [ -z "${FILE}" ]; then
            echo "No VSIX found to publish" >&2
            exit 1
          fi
          if [ "${PRE_RELEASE}" = "true" ]; then
            echo "Publishing pre-release ${VERSION} from ${FILE}"
            npx --yes @vscode/vsce publish --packagePath "${FILE}" --pre-release
          else
            echo "Publishing stable ${VERSION} from ${FILE}"
            npx --yes @vscode/vsce publish --packagePath "${FILE}"
          fi
