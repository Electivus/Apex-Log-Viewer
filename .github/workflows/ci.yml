name: CI

on:
  push:
    # Trunk-based: run CI on any branch (no packaging here)
    branches:
      - '**'
  pull_request:
  workflow_dispatch:
    inputs:
      scope:
        description: "Optional test scope (unit|integration|all)"
        required: false
        default: unit
        type: choice
        options:
          - unit
          - integration
          - all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Principle of least privilege for GITHUB_TOKEN
permissions:
  contents: read

jobs:
  build_and_test:
    name: Build and Test (Node ${{ matrix.node }} â€¢ ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [20]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build (type-check + lint + bundle)
        run: npm run build

      - name: Run tests
        run: |
          case "${{ github.event.inputs.scope || 'unit' }}" in
            unit) npm run test:unit:ci ;;
            integration) npm run test:integration:ci ;;
            all) npm run test:ci ;;
            *) npm run test:unit:ci ;;
          esac

  smoke_vsix:
    name: VSIX Smoke Test
    needs: build_and_test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Build and run VSIX smoke
        run: npm run test:smoke:vsix
        env:
          ALWAYS_SMOKE_VSIX: "1"

  package:
    name: Package VSIX
    # Run on tag pushes, on published Releases, or manual dispatch with tag_name
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != '')
    needs: build_and_test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
            npm_arch: x64
          - os: ubuntu-latest
            target: linux-arm64
            npm_arch: arm64
          - os: windows-latest
            target: win32-x64
            npm_arch: x64
          - os: windows-latest
            target: win32-arm64
            npm_arch: arm64
          - os: macos-latest
            target: darwin-x64
            npm_arch: x64
          - os: macos-latest
            target: darwin-arm64
            npm_arch: arm64
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    permissions:
      contents: write
      actions: write
    env:
      TAG_NAME: ${{ github.ref_type == 'tag' && github.ref_name || (github.event_name == 'release' && github.event.release.tag_name) || github.event.inputs.tag_name }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build + generate NLS assets
        run: npm run package

      - name: Download ripgrep binary for target architecture
        env:
          npm_config_arch: ${{ matrix.npm_arch }}
        run: node node_modules/@vscode/ripgrep/lib/postinstall.js --force

      - name: Determine channel (stable vs pre-release)
        uses: actions/github-script@v7
        with:
          script: |
            const version = require('./package.json').version;
            const minor = Number(version.split('.')[1] || 0);
            const tagName = process.env.TAG_NAME || '';
            let preRelease = minor % 2 === 1;
            if (/-pre|-beta|-alpha|-rc/.test(tagName)) {
              preRelease = true;
            }
            core.exportVariable('VERSION', version);
            core.exportVariable('PRE_RELEASE', preRelease ? 'true' : 'false');
            core.exportVariable('CHANNEL_SUFFIX', preRelease ? 'pre' : 'stable');

      - name: Clean previous VSIX artifacts
        run: |
          node -e "const fs=require('fs');for (const f of fs.readdirSync('.')) if (f.endsWith('.vsix')) fs.rmSync(f);"

      - name: Package VSIX target
        shell: bash
        env:
          MATRIX_TARGET: ${{ matrix.target }}
        run: |
          node <<'NODE'
          const { spawnSync } = require('child_process');
          const fs = require('fs');
          const target = process.env.MATRIX_TARGET;
          const version = process.env.VERSION;
          const suffix = process.env.CHANNEL_SUFFIX;
          const preRelease = process.env.PRE_RELEASE === 'true';
          const outName = `apex-log-viewer-${version}-${suffix}-${target}.vsix`;
          const args = ['--yes', '@vscode/vsce', 'package', '--no-yarn', '--target', target, '--out', outName];
          if (preRelease) {
            args.push('--pre-release');
          }
          const result = spawnSync('npx', args, { stdio: 'inherit', shell: process.platform === 'win32' });
          if (result.status !== 0) {
            process.exit(result.status ?? 1);
          }
          if (!fs.existsSync(outName)) {
            console.error(`Expected VSIX ${outName} was not created.`);
            process.exit(1);
          }
          NODE

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: apex-log-viewer-${{ env.VERSION }}-${{ env.CHANNEL_SUFFIX }}-vsix-${{ matrix.target }}
          path: |
            ./*.vsix
          if-no-files-found: error


  publish:
    name: Publish to Marketplace
    # Run on tag pushes, published Releases, or manual dispatch with tag_name
    if: (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != '')) && github.repository == 'Electivus/Apex-Log-Viewer'
    needs: package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
    environment: marketplace
    env:
      VSCE_PAT: ${{ secrets.VSCE_PAT }}
      TAG_NAME: ${{ github.ref_type == 'tag' && github.ref_name || (github.event_name == 'release' && github.event.release.tag_name) || github.event.inputs.tag_name }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build + generate NLS assets
        run: npm run package

      - name: Determine channel (stable vs pre-release)
        uses: actions/github-script@v7
        with:
          script: |
            const version = require('./package.json').version;
            const minor = Number(version.split('.')[1] || 0);
            const tagName = process.env.TAG_NAME || '';
            let preRelease = minor % 2 === 1;
            if (/-pre|-beta|-alpha|-rc/.test(tagName)) {
              preRelease = true;
            }
            core.exportVariable('VERSION', version);
            core.exportVariable('PRE_RELEASE', preRelease ? 'true' : 'false');
            core.exportVariable('CHANNEL_SUFFIX', preRelease ? 'pre' : 'stable');

      - name: Set GitHub Release prerelease flag automatically
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        env:
          TAG_NAME: ${{ env.TAG_NAME }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Setting prerelease=${PRE_RELEASE} for ${TAG_NAME}"
          RID=$(gh api -X GET repos/${{ github.repository }}/releases/tags/${TAG_NAME} -q .id)
          if [ "${PRE_RELEASE}" = "true" ]; then
            gh api -X PATCH repos/${{ github.repository }}/releases/$RID -f prerelease=true
          else
            gh api -X PATCH repos/${{ github.repository }}/releases/$RID -f prerelease=false
          fi

      - name: Download packaged VSIX artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: apex-log-viewer-${{ env.VERSION }}-${{ env.CHANNEL_SUFFIX }}-vsix-*
          path: vsix
          if-no-files-found: error

      - name: Collect VSIX files
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          find vsix -name '*.vsix' -exec mv {} . \;

      - name: Publish from VSIX artifact
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          FILES=( *.vsix )
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "No VSIX found to publish" >&2
            exit 1
          fi
          for FILE in "${FILES[@]}"; do
            if [ "${PRE_RELEASE}" = "true" ]; then
              echo "Publishing pre-release ${VERSION} from ${FILE}"
              npx --yes @vscode/vsce publish --packagePath "${FILE}" --pre-release
            else
              echo "Publishing stable ${VERSION} from ${FILE}"
              npx --yes @vscode/vsce publish --packagePath "${FILE}"
            fi
          done
