name: Release Flags

on:
  release:
    types: [published, edited]

permissions:
  contents: write

concurrency:
  group: release-flags-${{ github.event_name == 'release' && github.event.release.tag_name || github.run_id }}
  cancel-in-progress: false

jobs:
  set-prerelease-flag:
    name: Set prerelease flag based on version
    runs-on: ubuntu-latest
    steps:
      - name: Compute prerelease from semver minor
        id: semver
        run: |
          TAG="${{ github.event.release.tag_name }}"
          # Strip leading 'v' if present
          VERSION=${TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<<"$VERSION"
          if [ -z "$MINOR" ]; then
            echo "Could not parse minor from tag $TAG" >&2
            exit 1
          fi
          if [ $((MINOR % 2)) -eq 1 ]; then
            PRE=true
          else
            PRE=false
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "prerelease=$PRE" >> $GITHUB_OUTPUT
          echo "Computed prerelease=$PRE for $TAG"

      - name: Update GitHub Release prerelease flag
        uses: actions/github-script@v7
        with:
          script: |
            const tag = core.getInput('tag') || process.env.TAG;
            const prerelease = (core.getInput('prerelease') || process.env.PRERELEASE || 'false') === 'true';
            const { data: rel } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag
            });
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: rel.id,
              prerelease
            });
        env:
          TAG: ${{ steps.semver.outputs.tag }}
          PRERELEASE: ${{ steps.semver.outputs.prerelease }}
