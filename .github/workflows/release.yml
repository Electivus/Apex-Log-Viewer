name: Release (tags)

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  build_and_test:
    name: Build and Test (Node ${{ matrix.node }} â€¢ ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build (type-check + lint + bundle)
        run: npm run build

      - name: Run tests (unit + integration)
        run: npm run test:ci

  package:
    name: Package VSIX
    needs: build_and_test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      actions: write
    env:
      VSCE_PAT: ${{ secrets.VSCE_PAT }}
      TAG_NAME: ${{ github.ref_name }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Verify tag matches package.json version
        run: |
          set -euo pipefail
          PKG_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          if [ "$PKG_VERSION" != "$TAG_VERSION" ]; then
            echo "Tag $GITHUB_REF_NAME != package.json version $PKG_VERSION" >&2
            exit 1
          fi

      - name: Build + generate NLS assets
        run: npm run package

      - name: Determine channel (stable vs pre-release)
        id: channel
        run: |
          VERSION=$(node -p "require('./package.json').version")
          MINOR=$(node -p "require('./package.json').version.split('.')[1]")
          TAG_NAME="${TAG_NAME}"
          # default: even minor => stable, odd minor => pre-release
          if [ $((MINOR % 2)) -eq 1 ]; then
            PRE_RELEASE=true
          else
            PRE_RELEASE=false
          fi
          # allow explicit override via tag suffix (e.g., v0.7.0-pre, v0.7.0-beta.1)
          if [[ "$TAG_NAME" == *"-pre"* || "$TAG_NAME" == *"-beta"* || "$TAG_NAME" == *"-alpha"* || "$TAG_NAME" == *"-rc"* ]]; then
            PRE_RELEASE=true
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pre_release=$PRE_RELEASE" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PRE_RELEASE=$PRE_RELEASE" >> $GITHUB_ENV
          if [ "$PRE_RELEASE" = "true" ]; then echo "CHANNEL_SUFFIX=pre" >> $GITHUB_ENV; else echo "CHANNEL_SUFFIX=stable" >> $GITHUB_ENV; fi

      - name: Create VSIX
        run: |
          if [ "${PRE_RELEASE}" = "true" ]; then
            echo "Packaging pre-release VSIX (${VERSION})"
            npm run vsce:package:pre
          else
            echo "Packaging stable VSIX (${VERSION})"
            npm run vsce:package
          fi

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: apex-log-viewer-${{ github.ref_name }}-${{ env.CHANNEL_SUFFIX }}-vsix
          path: |
            ./*.vsix
          if-no-files-found: error

  publish:
    name: Publish to Marketplace
    if: github.repository == 'Electivus/Apex-Log-Viewer'
    needs: package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
    environment: marketplace
    env:
      VSCE_PAT: ${{ secrets.VSCE_PAT }}
      TAG_NAME: ${{ github.ref_name }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install dependencies
        run: npm ci

      - name: Verify tag matches package.json version
        run: |
          set -euo pipefail
          PKG_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          if [ "$PKG_VERSION" != "$TAG_VERSION" ]; then
            echo "Tag $GITHUB_REF_NAME != package.json version $PKG_VERSION" >&2
            exit 1
          fi

      - name: Build + generate NLS assets
        run: npm run package

      - name: Determine channel (stable vs pre-release)
        id: channel
        run: |
          VERSION=$(node -p "require('./package.json').version")
          MINOR=$(node -p "require('./package.json').version.split('.')[1]")
          TAG_NAME="${TAG_NAME}"
          if [ $((MINOR % 2)) -eq 1 ]; then PRE_RELEASE=true; else PRE_RELEASE=false; fi
          if [[ "$TAG_NAME" == *"-pre"* || "$TAG_NAME" == *"-beta"* || "$TAG_NAME" == *"-alpha"* || "$TAG_NAME" == *"-rc"* ]]; then PRE_RELEASE=true; fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pre_release=$PRE_RELEASE" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PRE_RELEASE=$PRE_RELEASE" >> $GITHUB_ENV
          if [ "$PRE_RELEASE" = "true" ]; then echo "CHANNEL_SUFFIX=pre" >> $GITHUB_ENV; else echo "CHANNEL_SUFFIX=stable" >> $GITHUB_ENV; fi

      - name: Download VSIX artifact from package job
        uses: actions/download-artifact@v4
        with:
          name: apex-log-viewer-${{ github.ref_name }}-${{ env.CHANNEL_SUFFIX }}-vsix
          path: .

      - name: Publish
        run: |
          if [ -z "${VSCE_PAT}" ]; then
            echo "VSCE_PAT not set; skipping Marketplace publish."
            exit 0
          fi
          if [ "${PRE_RELEASE}" = "true" ]; then
            echo "Publishing pre-release ${VERSION}"
            npm run vsce:publish:pre
          else
            echo "Publishing stable ${VERSION}"
            npm run vsce:publish
          fi

      - name: Create or update GitHub release (pre-release)
        if: env.PRE_RELEASE == 'true'
        env:
          TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          TITLE="$TAG"
          BODY="Automated pre-release."
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Updating existing pre-release $TAG"
            gh release edit "$TAG" --title "$TITLE" --notes "$BODY" --prerelease
          else
            echo "Creating pre-release $TAG"
            gh release create "$TAG" --title "$TITLE" --notes "$BODY" --prerelease
          fi
          # Upload VSIX(es) built in the package job
          gh release upload "$TAG" ./*.vsix --clobber

      - name: Create or update GitHub release (stable)
        if: env.PRE_RELEASE != 'true'
        env:
          TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          TITLE="$TAG"
          BODY="Automated stable release."
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Updating existing release $TAG"
            gh release edit "$TAG" --title "$TITLE" --notes "$BODY"
          else
            echo "Creating release $TAG"
            gh release create "$TAG" --title "$TITLE" --notes "$BODY"
          fi
          # Upload VSIX(es) built in the package job
          gh release upload "$TAG" ./*.vsix --clobber

  # Note: CHANGELOG.md is maintained manually by the project.
