name: Release (tags)

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  build_and_test:
    name: Build and Test (Node ${{ matrix.node }} â€¢ ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [20]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build (type-check + lint + bundle)
        run: npm run build

      - name: Run tests (unit + integration)
        run: npm run test:ci

  package:
    name: Package VSIX
    needs: build_and_test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
            npm_arch: x64
          - os: ubuntu-latest
            target: linux-arm64
            npm_arch: arm64
          - os: windows-latest
            target: win32-x64
            npm_arch: x64
          - os: windows-latest
            target: win32-arm64
            npm_arch: arm64
          - os: macos-latest
            target: darwin-x64
            npm_arch: x64
          - os: macos-latest
            target: darwin-arm64
            npm_arch: arm64
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    permissions:
      contents: write
      actions: write
    env:
      TAG_NAME: ${{ github.ref_name }}
      GH_TOKEN: ${{ github.token }}
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Verify tag matches package.json version
        shell: bash
        run: |
          set -euo pipefail
          PKG_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          if [ "$PKG_VERSION" != "$TAG_VERSION" ]; then
            echo "Tag $GITHUB_REF_NAME != package.json version $PKG_VERSION" >&2
            exit 1
          fi

      - name: Build + generate NLS assets
        run: npm run package

      - name: Download ripgrep binary for target architecture
        env:
          npm_config_arch: ${{ matrix.npm_arch }}
        run: node node_modules/@vscode/ripgrep/lib/postinstall.js --force

      - name: Determine channel (stable vs pre-release)
        id: determine_channel
        uses: actions/github-script@v7
        with:
          script: |
            const version = require('./package.json').version;
            const minor = Number(version.split('.')[1] || 0);
            const tagName = process.env.TAG_NAME || '';
            let preRelease = minor % 2 === 1;
            if (/-pre|-beta|-alpha|-rc/.test(tagName)) {
              preRelease = true;
            }
            core.exportVariable('VERSION', version);
            core.exportVariable('PRE_RELEASE', preRelease ? 'true' : 'false');
            core.exportVariable('CHANNEL_SUFFIX', preRelease ? 'pre' : 'stable');
            core.setOutput('version', version);
            core.setOutput('pre_release', preRelease ? 'true' : 'false');
            core.setOutput('channel_suffix', preRelease ? 'pre' : 'stable');

      - name: Clean previous VSIX artifacts
        run: |
          node -e "const fs=require('fs');for (const f of fs.readdirSync('.')) if (f.endsWith('.vsix')) fs.rmSync(f);"

      - name: Package VSIX target
        shell: bash
        env:
          MATRIX_TARGET: ${{ matrix.target }}
          VERSION: ${{ steps.determine_channel.outputs.version }}
          CHANNEL_SUFFIX: ${{ steps.determine_channel.outputs.channel_suffix }}
          PRE_RELEASE: ${{ steps.determine_channel.outputs.pre_release }}
        run: |
          node <<'NODE'
          const { spawnSync } = require('child_process');
          const fs = require('fs');
          const target = process.env.MATRIX_TARGET;
          const version = process.env.VERSION;
          const suffix = process.env.CHANNEL_SUFFIX;
          const preRelease = process.env.PRE_RELEASE === 'true';
          const outName = `apex-log-viewer-${version}-${suffix}-${target}.vsix`;
          const args = ['--yes', '@vscode/vsce', 'package', '--no-yarn', '--target', target, '--out', outName];
          if (preRelease) {
            args.push('--pre-release');
          }
          const result = spawnSync('npx', args, { stdio: 'inherit', shell: process.platform === 'win32' });
          if (result.status !== 0) {
            process.exit(result.status ?? 1);
          }
          if (!fs.existsSync(outName)) {
            console.error(`Expected VSIX ${outName} was not created.`);
            process.exit(1);
          }
          NODE

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: apex-log-viewer-${{ steps.determine_channel.outputs.version }}-${{ steps.determine_channel.outputs.channel_suffix }}-vsix-${{ matrix.target }}
          path: |
            ./*.vsix
          if-no-files-found: error

  publish:
    name: Publish to Marketplace
    if: github.repository == 'Electivus/Apex-Log-Viewer'
    needs: package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
    environment: marketplace
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm
      - name: Install dependencies
        run: npm ci

      - name: Verify tag matches package.json version
        shell: bash
        run: |
          set -euo pipefail
          PKG_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          if [ "$PKG_VERSION" != "$TAG_VERSION" ]; then
            echo "Tag $GITHUB_REF_NAME != package.json version $PKG_VERSION" >&2
            exit 1
          fi

      - name: Build + generate NLS assets
        run: npm run package

      - name: Determine channel (stable vs pre-release)
        id: determine_channel
        env:
          TAG_NAME: ${{ github.ref_name }}
        uses: actions/github-script@v7
        with:
          script: |
            const version = require('./package.json').version;
            const minor = Number(version.split('.')[1] || 0);
            const tagName = process.env.TAG_NAME || '';
            let preRelease = minor % 2 === 1;
            if (/-pre|-beta|-alpha|-rc/.test(tagName)) {
              preRelease = true;
            }
            core.exportVariable('VERSION', version);
            core.exportVariable('PRE_RELEASE', preRelease ? 'true' : 'false');
            core.exportVariable('CHANNEL_SUFFIX', preRelease ? 'pre' : 'stable');
            core.setOutput('version', version);
            core.setOutput('pre_release', preRelease ? 'true' : 'false');
            core.setOutput('channel_suffix', preRelease ? 'pre' : 'stable');

      - name: Ensure GitHub release exists
        env:
          TAG_NAME: ${{ github.ref_name }}
          PRE_RELEASE: ${{ steps.determine_channel.outputs.pre_release }}
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail
          if gh release view "${TAG_NAME}" >/dev/null 2>&1; then
            echo "Release ${TAG_NAME} already exists"
          else
            TITLE="${TAG_NAME}"
            NOTES="Automated placeholder release created by CI."
            if [ "${PRE_RELEASE}" = "true" ]; then
              gh release create "${TAG_NAME}" --title "${TITLE}" --notes "${NOTES}" --prerelease
            else
              gh release create "${TAG_NAME}" --title "${TITLE}" --notes "${NOTES}"
            fi
          fi

      - name: Set GitHub Release prerelease flag automatically
        env:
          TAG_NAME: ${{ github.ref_name }}
          PRE_RELEASE: ${{ steps.determine_channel.outputs.pre_release }}
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Setting prerelease=${PRE_RELEASE} for ${TAG_NAME}"
          RID=$(gh api -X GET repos/${{ github.repository }}/releases/tags/${TAG_NAME} -q .id)
          if [ "${PRE_RELEASE}" = "true" ]; then
            gh api -X PATCH repos/${{ github.repository }}/releases/$RID -f prerelease=true
          else
            gh api -X PATCH repos/${{ github.repository }}/releases/$RID -f prerelease=false
          fi

      - name: Download packaged VSIX artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: apex-log-viewer-${{ steps.determine_channel.outputs.version }}-${{ steps.determine_channel.outputs.channel_suffix }}-vsix-*
          path: vsix

      - name: Collect VSIX files
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          find vsix -name '*.vsix' -exec mv {} . \;

      - name: Publish from VSIX artifact
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
          PRE_RELEASE: ${{ steps.determine_channel.outputs.pre_release }}
          VERSION: ${{ steps.determine_channel.outputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${VSCE_PAT}" ]; then
            echo "VSCE_PAT not set; skipping Marketplace publish."
            exit 0
          fi
          shopt -s nullglob
          FILES=( *.vsix )
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "No VSIX found to publish" >&2
            exit 1
          fi
          for FILE in "${FILES[@]}"; do
            if [ "${PRE_RELEASE}" = "true" ]; then
              echo "Publishing pre-release ${VERSION} from ${FILE}"
              npx --yes @vscode/vsce publish --packagePath "${FILE}" --pre-release
            else
              echo "Publishing stable ${VERSION} from ${FILE}"
              npx --yes @vscode/vsce publish --packagePath "${FILE}"
            fi
          done

      - name: Create or update GitHub release (pre-release)
        if: steps.determine_channel.outputs.pre_release == 'true'
        env:
          TAG: ${{ github.ref_name }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TITLE="$TAG"
          BODY="Automated pre-release."
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Updating existing pre-release $TAG"
            gh release edit "$TAG" --title "$TITLE" --notes "$BODY" --prerelease
          else
            echo "Creating pre-release $TAG"
            gh release create "$TAG" --title "$TITLE" --notes "$BODY" --prerelease
          fi
          # Upload VSIX(es) built in the package job
          gh release upload "$TAG" ./*.vsix --clobber

      - name: Create or update GitHub release (stable)
        if: steps.determine_channel.outputs.pre_release != 'true'
        env:
          TAG: ${{ github.ref_name }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TITLE="$TAG"
          BODY="Automated stable release."
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Updating existing release $TAG"
            gh release edit "$TAG" --title "$TITLE" --notes "$BODY"
          else
            echo "Creating release $TAG"
            gh release create "$TAG" --title "$TITLE" --notes "$BODY"
          fi
          # Upload VSIX(es) built in the package job
          gh release upload "$TAG" ./*.vsix --clobber

  # Note: CHANGELOG.md is maintained manually by the project.
