name: Release (manual)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (major.minor.patch) â€” even minor recommended for stable releases'
        required: true
        type: string
      base_branch:
        description: 'Branch to release from'
        required: false
        default: 'main'
        type: string
      publish_marketplace:
        description: 'Publish to VS Code Marketplace'
        required: true
        default: true
        type: boolean
      publish_github:
        description: 'Create/Update GitHub release'
        required: true
        default: true
        type: boolean
      changelog_pr:
        description: 'Open PR with updated CHANGELOG.md'
        required: true
        default: true
        type: boolean
      release_notes_override:
        description: 'Optional custom release notes (Markdown)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tag: ${{ steps.meta.outputs.tag }}
      sha: ${{ steps.meta.outputs.sha }}
      release_notes_b64: ${{ steps.notes.outputs.encoded }}
      release_notes_text: ${{ steps.notes.outputs.plain }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.base_branch }}

      - name: Validate version
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version must follow major.minor.patch" >&2
            exit 1
          fi
          if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "Tag v${VERSION} already exists" >&2
            exit 1
          fi
          HEAD_SHA=$(git rev-parse HEAD)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=v$VERSION" >> "$GITHUB_OUTPUT"
          echo "sha=$HEAD_SHA" >> "$GITHUB_OUTPUT"

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20.17.0
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Apply release version
        run: npm run version:set -- "${{ steps.meta.outputs.version }}"

      - name: Build
        run: npm run build

      - name: Test
        run: npm run test:ci

      - name: Generate changelog entry
        run: npm run changelog:generate

      - name: Extract release notes
        id: notes
        shell: bash
        env:
          VERSION: ${{ steps.meta.outputs.version }}
          OVERRIDE: ${{ github.event.inputs.release_notes_override }}
        run: |
          set -euo pipefail
          if [[ -n "$OVERRIDE" ]]; then
            printf '%s' "$OVERRIDE" > RELEASE_NOTES.md
          else
            node <<'NODE'
            const fs = require('fs');
            const version = process.env.VERSION;
            const file = fs.readFileSync('CHANGELOG.md', 'utf8');
            const regex = new RegExp('^##\\s.*' + version.replace(/[.*+?^${}()|[\\]\\]/g, '\\$&') + '.*$', 'm');
            const match = file.match(regex);
            if (!match) {
              console.error(`Unable to locate changelog entry for ${version}`);
              process.exit(1);
            }
            const start = match.index;
            const rest = file.slice(start);
            const next = rest.indexOf('\n## ');
            const section = (next === -1 ? rest : rest.slice(0, next)).trim();
            fs.writeFileSync('RELEASE_NOTES.md', section ? section + '\n' : '');
            NODE
          fi
          NOTES=$(cat RELEASE_NOTES.md)
          # Ensure non-empty release notes
          if [[ -z "$NOTES" ]]; then
            NOTES="## ${VERSION}\n\nNo release notes generated."
            printf '%s\n' "$NOTES" > RELEASE_NOTES.md
          fi
          ENCODED=$(python -c "import base64,sys;print(base64.b64encode(open('RELEASE_NOTES.md','rb').read()).decode(), end='')")
          echo "plain<<'EOF'" >> "$GITHUB_OUTPUT"
          cat RELEASE_NOTES.md >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "encoded=$ENCODED" >> "$GITHUB_OUTPUT"

      - name: Reset development version
        run: npm run version:set -- 0.0.0

      - name: Detect changelog update
        id: changelog_diff
        run: |
          if git diff --quiet -- CHANGELOG.md; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create changelog PR
        if: github.event.inputs.changelog_pr == 'true' && steps.changelog_diff.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'docs: update changelog for v${{ steps.meta.outputs.version }}'
          title: 'docs: update changelog for v${{ steps.meta.outputs.version }}'
          branch: automation/changelog-v${{ steps.meta.outputs.version }}
          delete-branch: true
          base: ${{ github.event.inputs.base_branch }}
          add-paths: |
            CHANGELOG.md
          body: |
            Automated changelog update for v${{ steps.meta.outputs.version }}.

  package:
    name: Package VSIX
    needs: prepare
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.package.outputs.vsix }}
    steps:
      - name: Checkout target commit
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ needs.prepare.outputs.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20.17.0
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Apply release version
        run: npm run version:set -- "${{ needs.prepare.outputs.version }}"

      - name: Build (package prerequisites)
        run: npm run package

      - name: Package VSIX
        id: package
        shell: bash
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          set -euo pipefail
          rm -f *.vsix
          MINOR=$(python -c "import sys; print(int(sys.argv[1].split('.')[1]))" "$VERSION")
          PRE_FLAG=""
          if (( MINOR % 2 == 1 )); then
            PRE_FLAG="--pre-release"
          fi
          npx --yes @vscode/vsce package --no-yarn $PRE_FLAG
          VSIX=$(echo apex-log-viewer-*.vsix)
          echo "vsix=$VSIX" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: apex-log-viewer-${{ needs.prepare.outputs.version }}-vsix
          path: ${{ steps.package.outputs.vsix }}

  publish-marketplace:
    name: Publish Marketplace
    needs: [prepare, package]
    if: github.event.inputs.publish_marketplace == 'true'
    runs-on: ubuntu-latest
    environment: marketplace
    steps:
      - name: Checkout target commit
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ needs.prepare.outputs.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20.17.0
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Apply release version
        run: npm run version:set -- "${{ needs.prepare.outputs.version }}"

      - name: Build (package prerequisites)
        run: npm run package

      - name: Publish to Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
          VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          set -euo pipefail
          MINOR=$(python -c "import sys; print(int(sys.argv[1].split('.')[1]))" "$VERSION")
          FLAGS=("publish" "--no-yarn")
          if (( MINOR % 2 == 1 )); then
            FLAGS+=("--pre-release")
          fi
          npx --yes @vscode/vsce "${FLAGS[@]}"

  github-release:
    name: GitHub Release
    needs: [prepare, package]
    if: github.event.inputs.publish_github == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target commit
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ needs.prepare.outputs.sha }}

      - name: Download VSIX artifact
        uses: actions/download-artifact@v4
        with:
          name: apex-log-viewer-${{ needs.prepare.outputs.version }}-vsix
          path: dist

      - name: Create or update tag and release
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          TAG_NAME: ${{ needs.prepare.outputs.tag }}
          RELEASE_NOTES_B64: ${{ needs.prepare.outputs.release_notes_b64 }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          NOTES_FILE=$(mktemp)
          export NOTES_FILE
          python -c "import base64, os; data = base64.b64decode(os.environ.get('RELEASE_NOTES_B64', '').encode() or b''); open(os.environ['NOTES_FILE'],'wb').write(data)"
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists"
          else
            git tag "$TAG_NAME" "${{ needs.prepare.outputs.sha }}"
            git push origin "$TAG_NAME"
          fi
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            gh release upload "$TAG_NAME" dist/*.vsix --clobber
            gh release edit "$TAG_NAME" --notes-file "$NOTES_FILE" --title "$TAG_NAME"
          else
            gh release create "$TAG_NAME" dist/*.vsix --notes-file "$NOTES_FILE" --title "$TAG_NAME"
          fi
